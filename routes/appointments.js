const express = require("express");
const router = express.Router();
const Appointment = require("../models/Appointment");

// üìå ƒê·∫∑t l·ªãch h·∫πn m·ªõi
router.post("/book", async (req, res) => {
  try {
    const { customer, garage, vehicle, service, date, time } = req.body;

    // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (!customer || !garage || !vehicle || !service || !date || !time) {
      return res.status(400).json({ error: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!" });
    }

    // T·∫°o l·ªãch h·∫πn m·ªõi
    const newAppointment = new Appointment({
      customer,
      garage,
      vehicle,
      service,
      date,
      time,
    });

    await newAppointment.save();
    res
      .status(201)
      .json({ message: "ƒê·∫∑t l·ªãch th√†nh c√¥ng!", appointment: newAppointment });
  } catch (error) {
    console.error("L·ªói khi ƒë·∫∑t l·ªãch:", error);
    res.status(500).json({ error: "L·ªói server khi ƒë·∫∑t l·ªãch" });
  }
});

//gara
router.put("/appointment/:id/status", async (req, res) => {
  try {
    const { status, reason } = req.body;
    const validStatuses = ["pending", "confirmed", "completed", "cancelled"];

    // Ki·ªÉm tra tr·∫°ng th√°i h·ª£p l·ªá
    if (!validStatuses.includes(status)) {
      return res.status(400).json({ error: "Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá!" });
    }

    const appointment = await Appointment.findById(req.params.id);

    if (!appointment) {
      return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn" });
    }

    // N·∫øu h·ªßy l·ªãch h·∫πn m√† kh√¥ng c√≥ l√Ω do -> b√°o l·ªói
    if (status === "cancelled" && !reason) {
      return res.status(400).json({ error: "Ph·∫£i c√≥ l√Ω do khi h·ªßy l·ªãch h·∫πn!" });
    }

    appointment.status = status;
    appointment.reason = status === "cancelled" ? reason : null;
    await appointment.save();

    res.json({
      message: `L·ªãch h·∫πn ƒë√£ ƒë∆∞·ª£c ${
        status === "confirmed"
          ? "x√°c nh·∫≠n"
          : status === "completed"
          ? "ho√†n th√†nh"
          : "h·ªßy"
      }`,
      appointment,
    });
  } catch (error) {
    console.error("L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i l·ªãch h·∫πn:", error);
    res.status(500).json({ error: "L·ªói server khi c·∫≠p nh·∫≠t tr·∫°ng th√°i" });
  }
});

// üìå L·∫•y danh s√°ch l·ªãch h·∫πn
router.get("/appointments", async (req, res) => {
  try {
    const appointments = await Appointment.find();
    res.json(appointments);
  } catch (error) {
    console.error("L·ªói l·∫•y danh s√°ch l·ªãch h·∫πn:", error);
    res.status(500).json({ error: "L·ªói server khi l·∫•y danh s√°ch l·ªãch h·∫πn" });
  }
});

// üìå X√≥a l·ªãch h·∫πn
router.delete("/appointment/:id", async (req, res) => {
  try {
    const appointment = await Appointment.findByIdAndDelete(req.params.id);

    if (!appointment) {
      return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn ƒë·ªÉ x√≥a" });
    }

    res.json({ message: "X√≥a l·ªãch h·∫πn th√†nh c√¥ng!" });
  } catch (error) {
    console.error("L·ªói khi x√≥a l·ªãch h·∫πn:", error);
    res.status(500).json({ error: "L·ªói server khi x√≥a l·ªãch h·∫πn" });
  }
});

module.exports = router;
