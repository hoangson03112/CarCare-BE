const express = require("express");
const router = express.Router();
const Booking = require("../models/Booking");

// üìå ƒê·∫∑t l·ªãch h·∫πn m·ªõi
router.post("/book", async (req, res) => {
  try {
    const { customer, garage, vehicle, service, date, time } = req.body;

    // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (!customer || !garage || !vehicle || !service || !date || !time) {
      return res.status(400).json({ error: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!" });
    }

    // T·∫°o l·ªãch h·∫πn m·ªõi
    const newAppointment = new Booking({
      customer,
      garage,
      vehicle,
      service,
      date,
      time,
    });

    await newAppointment.save();
    res
      .status(201)
      .json({ message: "ƒê·∫∑t l·ªãch th√†nh c√¥ng!", appointment: newAppointment });
  } catch (error) {
    console.error("L·ªói khi ƒë·∫∑t l·ªãch:", error);
    res.status(500).json({ error: "L·ªói server khi ƒë·∫∑t l·ªãch" });
  }
});

router.get("/user/:customerId", async (req, res) => {
  try {
    const { customerId } = req.params;
    const appointments = await Booking.find({
      customer: customerId,
    }).populate("garage", "name address");

    res.status(200).json(appointments);
  } catch (error) {
    console.error("L·ªói khi l·∫•y l·ªãch h·∫πn c·ªßa user:", error);
    res.status(500).json({ error: "L·ªói server khi l·∫•y l·ªãch h·∫πn c·ªßa user" });
  }
});

// üìå L·∫•y danh s√°ch l·ªãch h·∫πn c·ªßa Gara
router.get("/garage/:garageId", async (req, res) => {
  try {
    const { garageId } = req.params;
    const appointments = await Booking.find({ garage: garageId }).populate(
      "customer",
      "name phone"
    );

    res.status(200).json(appointments);
  } catch (error) {
    console.error("L·ªói khi l·∫•y l·ªãch h·∫πn c·ªßa gara:", error);
    res.status(500).json({ error: "L·ªói server khi l·∫•y l·ªãch h·∫πn c·ªßa gara" });
  }
});

// üìå C·∫≠p nh·∫≠t tr·∫°ng th√°i l·ªãch h·∫πn (VD: x√°c nh·∫≠n, ho√†n th√†nh, h·ªßy)
router.patch("/:appointmentId/status", async (req, res) => {
  try {
    const { appointmentId } = req.params;
    const { status } = req.body;

    // Ki·ªÉm tra tr·∫°ng th√°i h·ª£p l·ªá
    if (!["pending", "confirmed", "completed", "cancelled"].includes(status)) {
      return res.status(400).json({ error: "Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá" });
    }

    const updatedAppointment = await Booking.findByIdAndUpdate(
      appointmentId,
      { status },
      { new: true }
    );

    if (!updatedAppointment) {
      return res.status(404).json({ error: "L·ªãch h·∫πn kh√¥ng t·ªìn t·∫°i" });
    }

    res.status(200).json({
      message: "C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng",
      appointment: updatedAppointment,
    });
  } catch (error) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i:", error);
    res.status(500).json({ error: "L·ªói server khi c·∫≠p nh·∫≠t tr·∫°ng th√°i" });
  }
});

// üìå H·ªßy l·ªãch h·∫πn
router.delete("/:appointmentId", async (req, res) => {
  try {
    const { appointmentId } = req.params;
    const deletedAppointment = await Booking.findByIdAndDelete(appointmentId);

    if (!deletedAppointment) {
      return res.status(404).json({ error: "L·ªãch h·∫πn kh√¥ng t·ªìn t·∫°i" });
    }

    res.status(200).json({ message: "ƒê√£ h·ªßy l·ªãch h·∫πn" });
  } catch (error) {
    console.error("L·ªói khi h·ªßy l·ªãch h·∫πn:", error);
    res.status(500).json({ error: "L·ªói server khi h·ªßy l·ªãch h·∫πn" });
  }
});

module.exports = router;
