const Schedule = require('../models/Schedule');

// üìå L·∫•y l·ªãch theo garageId v√† ng√†y (hi·ªÉn th·ªã slot tr·ªëng v√† ƒë√£ ƒë·∫∑t)
exports.getScheduleByGarage = async (req, res) => {
    try {
        const { garageId } = req.params;
        const { date } = req.query; // Ng√†y c·∫ßn l·∫•y l·ªãch

        if (!date) {
            return res.status(400).json({ message: 'Vui l√≤ng cung c·∫•p ng√†y' });
        }

        const schedule = await Schedule.findOne({ garageId, date }).populate('timeSlots.bookingId');

        if (!schedule) {
            return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y l·ªãch' });
        }

        res.status(200).json(schedule);
    } catch (error) {
        res.status(500).json({ message: 'L·ªói khi l·∫•y l·ªãch', error });
    }
};

// üìå C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa slot khi ƒë·∫∑t l·ªãch ho·∫∑c h·ªßy l·ªãch
exports.updateScheduleSlot = async (req, res) => {
    try {
        const { garageId } = req.params;
        const { date, slot } = req.body;
        const { status, bookingId } = req.body;

        const schedule = await Schedule.findOne({ garageId, date });
        if (!schedule) {
            return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y l·ªãch' });
        }

        const slotIndex = schedule.timeSlots.findIndex((s) => s.slot === slot);
        if (slotIndex === -1) {
            return res.status(400).json({ message: 'Kh√¥ng t√¨m th·∫•y slot n√†y' });
        }

        schedule.timeSlots[slotIndex].status = status;
        schedule.timeSlots[slotIndex].bookingId = status === 'Booked' ? bookingId : null;

        await schedule.save();
        res.status(200).json({ message: 'C·∫≠p nh·∫≠t l·ªãch th√†nh c√¥ng', schedule });
    } catch (error) {
        res.status(500).json({ message: 'L·ªói khi c·∫≠p nh·∫≠t l·ªãch', error });
    }
};
